(()=>{"use strict";var e={n:t=>{var s=t&&t.__esModule?()=>t.default:()=>t;return e.d(s,{a:s}),s},d:(t,s)=>{for(var r in s)e.o(s,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:s[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const t=window.React,s=window.wp.i18n,r=window.wp.components,o=window.wp.element,n=window.wp.data,a=window.wp.api;var l=e.n(a);const c=window.wp.apiFetch;var i=e.n(c);const p=window.wp.notices,m=()=>{const e=(0,n.useSelect)((e=>e(p.store).getNotices().filter((e=>"snackbar"===e.type))),[]),{removeNotice:s}=(0,n.useDispatch)(p.store);return(0,t.createElement)(r.SnackbarList,{className:"edit-site-notices",notices:e,onRemove:s})};function d(){const[e,a]=(0,t.useReducer)(((e,t)=>({...e,...t})),{isLoaded:!1,settings:{active:!0,storage:"apc",features:{emails:!0,errors:!0,options:!0,posts:!0,queries:!0,requests:!0,remote_requests:!0,updates:!0}}}),{isLoaded:c,isActive:p,settings:d}=e,{active:u,storage:g,features:_}=d;return(0,t.useEffect)((()=>{l().loadPromise.then((()=>{const e=new(l().models.Settings);!1===c&&e.fetch().then((e=>{console.log(e),null!==e.prompress_settings&&a({isLoaded:!0,settings:{active:e.prompress_settings.active,features:e.prompress_settings.features}}),a({isLoaded:!0})})).catch((e=>{e.log(e)}))}))}),[]),(0,t.useEffect)((()=>{i()({method:"GET",path:"/prompress/v1/storage/compatibility"}).then((e=>{a({isStorageCompatLoaded:!0,storageCompat:e})})).catch((e=>{e.log(e)}))}),[]),c?(0,t.createElement)(o.Fragment,null,(0,t.createElement)("div",{className:"prompress__header"},(0,t.createElement)("div",{className:"prompress__container"},(0,t.createElement)("div",{className:"prompress__title"},(0,t.createElement)("h1",null,(0,s.__)("PromPress Settings","prompress")," ",(0,t.createElement)(r.Icon,{icon:"admin-plugins"}))))),(0,t.createElement)("div",{className:"prompress__main"},(0,t.createElement)("div",{className:"components-panel"},(0,t.createElement)("div",{className:"components-panel__body is-opened"},(0,t.createElement)("h2",{className:"components-panel__body-title"},(0,s.__)("General","prompress")),(0,t.createElement)("p",null,"You can control whether monitoring is active or inactive globally."),(0,t.createElement)(r.ToggleControl,{label:"Active",help:u?"Monitoring is active.":"Monitoring is not active.",checked:u,onChange:()=>{a({settings:{...d,active:!u}})}}),(0,t.createElement)(r.Button,{variant:"secondary",onClick:()=>{i()({method:"GET",path:"/prompress/v1/storage/wipe"}).then((()=>{(0,n.dispatch)("core/notices").createNotice("success",(0,s.__)("Storage wiped","prompress"),{type:"snackbar",isDismissible:!0})})).catch((e=>{(0,n.dispatch)("core/notices").createNotice("success",(0,s.__)("Failed to wipe storage","prompress"),{type:"snackbar",isDismissible:!0})}))}},(0,s.__)("Wipe Storage","prompress")))),(0,t.createElement)("div",{className:"components-panel"},(0,t.createElement)("div",{className:"components-panel__body is-opened"},(0,t.createElement)("h2",{className:"components-panel__body-title"},(0,s.__)("Features","prompress")),(0,t.createElement)("p",null,"Toggle the following features on/off to control what is being monitored."),(0,t.createElement)(r.ToggleControl,{label:(0,s.__)("Emails","prompress"),help:(0,s.__)("Track the number of emails sent.","prompress"),checked:_.emails,onChange:()=>{a({settings:{...d,features:{..._,emails:!_.emails}}})}}),(0,t.createElement)(r.ToggleControl,{label:(0,s.__)("Errors","prompress"),help:(0,s.__)("Track the number of errors thrown.","prompress"),checked:_.errors,onChange:()=>{a({settings:{...d,features:{..._,errors:!_.errors}}})}}),(0,t.createElement)(r.ToggleControl,{label:(0,s.__)("Options","prompress"),help:(0,s.__)("Track the number of options.","prompress"),checked:_.options,onChange:()=>{a({settings:{...d,features:{..._,options:!_.options}}})}}),(0,t.createElement)(r.ToggleControl,{label:(0,s.__)("Posts","prompress"),help:(0,s.__)("Track the number of posts (with post type).","prompress"),checked:_.posts,onChange:()=>{a({settings:{...d,features:{..._,posts:!_.posts}}})}}),(0,t.createElement)(r.ToggleControl,{label:(0,s.__)("Queries","prompress"),help:(0,s.__)("Track the number and length of database queries. Note: The `SAVEQUERIES` constant must be set and true.","prompress"),checked:_.queries,onChange:()=>{a({settings:{...d,features:{..._,queries:!_.queries}}})}}),(0,t.createElement)(r.ToggleControl,{label:(0,s.__)("Requests","prompress"),help:(0,s.__)("Track the number and length of requests.","prompress"),checked:_.requests,onChange:()=>{a({settings:{...d,features:{..._,requests:!_.requests}}})}}),(0,t.createElement)(r.ToggleControl,{label:(0,s.__)("Remote Requests","prompress"),help:(0,s.__)("Track the number and length of remote requests.","prompress"),checked:_.remote_requests,onChange:()=>{a({settings:{...d,features:{..._,remote_requests:!_.remote_requests}}})}}),(0,t.createElement)(r.ToggleControl,{label:(0,s.__)("Updates","prompress"),help:(0,s.__)("Track the number of plugin and theme updates available.","prompress"),checked:_.updates,onChange:()=>{a({settings:{...d,features:{..._,updates:!_.updates}}})}})))),(0,t.createElement)("div",{className:"prompress__save"},(0,t.createElement)(r.Button,{variant:"primary",onClick:()=>{new(l().models.Settings)({prompress_settings:d}).save(),(0,n.dispatch)("core/notices").createNotice("success",(0,s.__)("Settings Saved","prompress"),{type:"snackbar",isDismissible:!0})}},(0,s.__)("Save","prompress"))),(0,t.createElement)("div",{className:"prompress__notices"},(0,t.createElement)(m,null))):(0,t.createElement)(r.Placeholder,null,(0,t.createElement)(r.Spinner,null))}document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("prompress-plugin-settings");e&&(0,o.render)((0,t.createElement)(d,null),e)}))})();